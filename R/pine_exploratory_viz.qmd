---
title: "Pine Exploratory Vizualizaions"
format: html
editor: visual
execute: 
  echo: false
  message: false
  warning: false
  results: false
---

```{r}
#| echo: false
#| output: false

library(leaflet)
library(fiveneedlepine)
library(plotly)
library(lubridate)
library(RColorBrewer)
library(QCkit)
library(sp)
library(raster)
#library(terra)
library(tidyverse)
```

```{r}
#| output: false
data_dir = here::here("data")
# TODO: change to relative directory
pine <- fiveneedlepine::loadPine("C:/Users/ifoster/Documents/R/mojn-pine-rpackage/data/FNP_MOJN_Primary_Copy.accdb")

 
  
# Remove seedling plots with no seedlings
pine$data$Seedling <- pine$data$Seedling %>%
  filter(speciesCode != "_NONE") %>%
  # Make a unique identifier for all seedlings
  mutate(uniqueSeedlingID = paste0(locationID, "_", tag)) 

# TODO: there is probably a cleaner way to do this
# Make a table with all of the seedlings that were pulled or missing
pulledSeedlings <- pine$data$Seedling %>%
  filter(vitality == 'P' | vitality == 'M')

# Remove all instances of pulled or missing seedlings based on unique seedling ID
pine$data$Seedling <- pine$data$Seedling %>%
  filter(!(uniqueSeedlingID %in% pulledSeedlings$uniqueSeedlingID)) %>%
  dplyr::select(-uniqueSeedlingID)



# TODO: move this
# Calculates the visit number for each visit to a site
visitNum <- pine$data$Visit %>%
  dplyr::filter(repeatSample != 1) %>%
  dplyr::mutate(year = year(as_date(eventDate))) %>%
  # TODO: make more robust, would a visit to a panel ever be one year off
  # so something like make visit year the year the majority of visits are
  dplyr::select(panel, year)%>%
  dplyr::group_by(panel, year) %>%
  dplyr::summarize(n = n()) %>%
  dplyr::group_by(panel) %>%
  dplyr::mutate(visitNumber = seq_along(year))
  # arrange year descending within panel descending

# TODO: ONLY INCLUDES LIVE TREES
# Cleaning live tree data for wrangling and visualization
pine$data$Tree <- 
  noop <- pine$data$Tree %>%
  # Remove all dead trees
  filter(vitality == "Live") %>%
  # Remove any heights and DBH that are NA
  filter(!is.na(treeHeight_m) & treeHeight_m != -999 & treeHeight_m != 999) %>%
  filter(!is.na(treeDBH_cm) & treeDBH_cm != -999 & treeDBH_cm != 999) %>%
  mutate(uniqueTreeID = paste(locationID, "_", subplot, "_", tag),
    year = year(as_date(eventDate))) %>%
  # Join with table containing visit number
  left_join(visitNum)
```

```{r}
# Data wrangling to find lat long and elevation
# TODO: you have to hard code the UTM zone :( find workaround
sitesData <- pine$data$Site %>%
  QCkit::convert_utm_to_ll(EastingCol = "primaryCornerXCoord",
                    NorthingCol = "primaryCornerYCoord",
                    zone = "11",
                    datum = "NAD83") %>%
  mutate(decimal_lat = as.numeric(decimalLatitude),
         decimal_long = as.numeric(decimalLongitude)) %>%
  # TODO: one site seems to return NA as lat long
  # Get elevation for each lat long
  get_elevation('decimalLatitude', 'decimalLongitude', spatial_ref="4326") %>%
  # Round elevation to two sig figs
  mutate(roundedElevation = signif(as.numeric(minimumElevationInMeters), 2)) %>%
  # Divide elevation into 10 groups
  mutate(elevationGroup = cut(x = as.numeric(minimumElevationInMeters), breaks = 10, labels = FALSE))


# # TODO
# # Another method to find lat long of sites from utm northing
# # Selects locationID and UTM info from sites data
# sitesSplit <- pine$data$Site %>%
#   # Remove any letters from UTM Zone so it's just the zone number
#   mutate(UTM_Zone = str_extract(UTM_Zone, "[0-9]*")) %>%
#   rename(latitude = primaryCornerXCoord) %>%
#   rename(longitude = primaryCornerYCoord) %>%
#   dplyr::select(locationID, latitude, longitude, UTM_Zone)
# 
# v <- vect(sitesSplit, crs= paste("+proj=utm +zone=11 +datum=NAD83  +units=m"), geom= c("latitude", "longitude"))
# y <- project(v, "+proj=longlat +datum=WGS84")
# 
# lonlat <- geom(y)[, c("x", "y")]
# #head(lonlat, 3)
#   
# 
# # TODO: see if you can add map() to the above function so you don't have to specify the UTM zone
# #v2 <- map(sitesSplit, vector(x = ., crs= paste("+proj=utm +zone=11 +datum=NAD83  +units=m"), geom= c("latitude", "longitude")))
```

## Seedling Graphs

::: panel-tabset
### Species

```{r}
# Seedling species by year
seedlingSpecs <- pine$data$Seedling %>%
  ggplot(aes(x = factor(year(as_datetime(eventDate))))) + 
  geom_bar(aes( fill = factor(speciesCode))) +
  theme_minimal() + 
  labs(title = "Seedling Species",
       x = "Year", y = "Count",
       fill = "Species Code") +
  facet_wrap(~panel, scales = "free_x") +
  theme(plot.title = element_text(hjust = 0.5)) + 
  scale_fill_brewer(palette="Accent")

ggplotly(seedlingSpecs)
```

### Community

```{r}
# height of seedling by elevation or latitude
seedlingHeight <- pine$data$Seedling %>%
  dplyr::select(locationID, eventDate, speciesCode, heightClass, eventID) %>%
  dplyr::mutate(heightClass = case_when(
    heightClass == "ND" ~ NA,
    .default = heightClass)) %>%
  full_join(sitesData, by = "locationID") %>%
  dplyr::select(locationID, heightClass, decimalLatitude, elevationGroup) %>%
  filter(!is.na(heightClass))



seedlingHeightGraph <- pine$data$Seedling %>%
  ggplot(aes(x = factor(sampleFrame))) + 
  geom_bar(aes( fill = factor(heightClass))) +
  theme_minimal() + 
  labs(title = "Seedling Height",
       x = "Community Group", y = "Count",
       fill = "Height Class") + 
  theme(plot.title = element_text(hjust = 0.5))

ggplotly(seedlingHeightGraph)
```

### Height Percent

```{r}
# Graph percent of each height class for each elevation group
# TODO: reorder graph so smallest height class is at the bottom
seedlingPercentGraph <- pine$data$Seedling %>%
  group_by(sampleFrame, heightClass) %>%
  summarize(heightCount = n()) %>%
  group_by(sampleFrame) %>%
  mutate(percent = heightCount/sum(heightCount)*100) %>%
  ggplot(aes(x = factor(sampleFrame))) +
  geom_bar(aes(y = percent, fill = factor(heightClass)), stat = "identity", postion = "stack") + 
  theme_minimal() + 
  labs(title = "Seedling Heigh Class Percent",
       x = "Community Group", y = "Percent",
       fill = "HeightClass") + 
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(axis.text.x = element_text(hjust = 0.5)) + scale_fill_discrete(breaks=c("20 - <50 cm", "50 - <100 cm", "100 - <137 cm"))

ggplotly(seedlingPercentGraph)
```

### Seedlings by Site

```{r}
# Number of seedlings per site
# TODO if a seedling is listed in more than one year it is counted twice
seedingSiteGraph <- pine$data$Seedling %>%
  full_join(pine$data$Site, by = "locationID") %>%
  group_by(locationID, speciesCode)  %>%
  summarise(count = n()) %>%
  ggplot(aes(x = factor(locationID), y=count, fill = speciesCode)) +
  geom_col() + 
  theme_minimal() + 
  labs(title = "Seedling Species by Site",
       x = "Site Code", y = "Count",
       fill = "Species") + 
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(axis.text.x = element_text(hjust = 0.5, angle = 315))

ggplotly(seedingSiteGraph)
```
:::

## Tree Graphs

::: panel-tabset
##### Latitude

```{r}
# Plot of Percentage of Tree Species by UTM Northing
# TODO: could add count in the popup when you mouse over a section of the graph
# TODO: could change it from UTM Northing to elevation
# Data wrangling to create percent of species for each UTM Northing
tree_pct <- pine$data$Tree %>%
  dplyr::select(locationID, eventID, speciesCode) %>%
  full_join(pine$data$Site, by = "locationID") %>%
  dplyr::select(locationID, eventID, speciesCode, primaryCornerYCoord) %>%
  group_by(primaryCornerYCoord, speciesCode) %>%
  summarize(speciesCount = n()) %>%
  group_by(primaryCornerYCoord) %>%
  mutate(percent = speciesCount/sum(speciesCount)*100)

# Graph of Tree Species by UTM Northing
tree_pct_plot <- tree_pct %>%
  ggplot(aes(x = factor(primaryCornerYCoord))) +
  geom_bar(aes(y = percent, fill = factor(speciesCode)), stat = "identity", postion = "stack") + 
  theme_minimal() + 
  labs(title = "Tree Species by UTM Northing",
       x = "UTM Northing", y = "Percent",
       fill = "Species Code") + 
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(axis.text.x = element_text(hjust = 0.5, angle = 315))

ggplotly(tree_pct_plot)
```

##### Community

```{r}
# Graph of tree count by elevation group
# TODO: chnage from elevation group to community
treeElevation2Graph <- pine$data$Tree %>%
  dplyr::select(locationID, eventID, speciesCode) %>%
  # Join with sites table to get lat long
  full_join(sitesData, by = "locationID") %>%
  ggplot(aes(x = factor(sampleFrame), fill = as.factor(speciesCode))) +
  geom_bar(stat = "count") + 
  theme_minimal() + 
  labs(title = "Tree Count",
       x = "Community Group", y = "Count",
       fill = "Species Code") + 
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(axis.text.x = element_text(hjust = 0.5))

ggplotly(treeElevation2Graph)
```

##### Infestation

```{r}
# Count the number of each type of infestation for each year
# TODO: what are branch cankers A and I? Also I think we could group the bole cankers and branch cankers into one group each probably (or two depending on what A and I mean)
# TODO: combine pine infestation types
treeInfestation <- pine$data$Tree %>%
  pivot_longer(cols = c("branchCanks_A_Upper", "branchCanks_I_Upper", "branchCanks_A_Mid", "branchCanks_I_Mid", "branchCanks_A_Lower", "branchCanks_I_Lower", "boleCankers_A_Upper", "boleCankers_I_Upper", "boleCankers_A_Mid", "boleCankers_I_Mid", "boleCankers_A_Lower", "boleCankers_I_Lower", "pineBeetleJGalleries", "pineBeetlePitchTube", "pineBeetleFrass", "mistletoe"), names_to = "infestationType", values_to = "infestation") %>%
  mutate(year = year(eventDate)) %>%
  dplyr::select(eventID, year, infestationType, infestation, panel) %>%
  group_by(year, infestationType, infestation, panel) %>%
  summarise(count = n())


# Graph infestation type by year
infestationGraph <- treeInfestation %>%
  filter(infestation == 'Y') %>%
  ggplot(aes(x = factor(year), y = count, fill = as.factor(infestationType))) +
  geom_col() + 
  # TODO: delete empty columns
  facet_wrap(~panel, scales="free_x", drop = TRUE) +
  theme_minimal() +
  labs(title = "Tree Infestation",
       x = "Year", y = "Count",
       fill = "Infestation Type") +
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(axis.text.x = element_text(hjust = 0.5))

ggplotly(infestationGraph)
```

##### Mistletoe

```{r}
# Mistletoe infestation by year
pine$data$Tree %>% ggplot(aes(x = factor(year(eventDate)), fill = mistletoe))  + 
  geom_bar(stat = "count") +
  # TODO: delete empty columns
  facet_wrap(~panel, scales="free_x") +
  theme_minimal() + 
  labs(title = "Mistletoe Infestation",
       x = "Year", y = "Count",
       fill = "Mistletoe") + 
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(axis.text.x = element_text(hjust = 0.5))
```

##### Vitality

```{r}
# Tree status by Year
pine$data$Tree %>%
  ggplot(aes(x = factor(year(eventDate)), fill = vitality)) +
  geom_bar(stat = "count") +
  facet_wrap(~panel, scales="free_x") +
  theme_minimal() + 
  labs(title = "Tree Vitality",
       x = "Year", y = "Count",
       fill = "Vitality") + 
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(axis.text.x = element_text(hjust = 0.5))
```

##### Height

```{r}
# Tree Height
# TODO Label tree height categories
treeHeightGraph <- pine$data$Tree %>%
  mutate(treeHeight_m = case_when(
    (treeHeight_m == -999 | treeHeight_m == 999) ~ NA,
    .default = treeHeight_m),
    heightGroup = cut(x = as.numeric(treeHeight_m), breaks = 20, labels = FALSE)) %>%
  ggplot(aes(x = heightGroup)) + 
  geom_bar() + 
  theme_bw() + 
  labs(title = "Tree Count by Height",
       x = "Height Group", y = "Count") + 
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(axis.text.x = element_text(hjust = 0.5))

ggplotly(treeHeightGraph)
```

##### DBH

```{r}
# Count of trees by DBH group 
treeDBHGraph <- pine$data$Tree %>%
  mutate(treeDBH_cm = case_when(
    (treeDBH_cm == -999 | treeDBH_cm == 999) ~ NA,
    .default = treeDBH_cm),
    heightGroup = cut(x = as.numeric(treeDBH_cm), breaks = 20, labels = FALSE)) %>%
  ggplot(aes(x = heightGroup)) + 
  geom_bar() + 
  theme_bw() + 
  labs(title = "Tree Count by DBH",
       x = "DBH Group", y = "Count") + 
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(axis.text.x = element_text(hjust = 0.5))

ggplotly(treeDBHGraph)
```

##### Cause of Death

```{r}
# # Graph of the death types each year
# causeOfDeathGraph <- pine$data$Tree %>%
#   filter(vitality == "Recently Dead") %>%
#   ggplot(aes(x = factor(year(as_date(eventDate))), fill = factor(causeOfDeath))) + 
#   geom_bar() + 
#   facet_wrap(~panel, scales="free_x") +
#   theme_minimal() + 
#   labs(title = "Cause of Death",
#        x = "Year", y = "Count",
#        fill = "Cause of Death") + 
#   theme(plot.title = element_text(hjust = 0.5)) +
#   theme(axis.text.x = element_text(hjust = 0.5))
# 
# ggplotly(causeOfDeathGraph)
```

##### Height by Species

```{r}
# Box plot of the heights of different species
heightBySpeciesGraph <- pine$data$Tree %>%
  mutate(treeHeight_m = case_when(
    (treeHeight_m == -999 | treeHeight_m == 999) ~ NA,
    .default = treeHeight_m)) %>%
  filter(!is.na(treeHeight_m)) %>%
  ggplot(aes(x = speciesCode, y = treeHeight_m, fill = speciesCode)) +
  geom_boxplot() + 
  theme_minimal() + 
  labs(title = "Tree Height",
       x = "Species", y = "Height (m)",
       fill = "Species") + 
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(axis.text.x = element_text(hjust = 0.5))

ggplotly(heightBySpeciesGraph)
```

##### Dead Species

```{r}
# # Recently dead species by year
# speciesDeadGraph <- pine$data$Tree %>%
#   filter(vitality == "Recently Dead") %>%
#   ggplot(aes(x = factor(year(as_date(eventDate))), fill = speciesCode)) +
#   geom_bar() + 
#   # TODO: delete empty columns
#   facet_wrap(~panel, scales="free_x") + 
#   theme_minimal() + 
#   labs(title = "Recently Dead Trees",
#        x = "Year", y = "Count",
#        fill = "Species") + 
#   theme(plot.title = element_text(hjust = 0.5)) +
#   theme(axis.text.x = element_text(hjust = 0.5))
# 
# ggplotly(speciesDeadGraph)
```
:::
