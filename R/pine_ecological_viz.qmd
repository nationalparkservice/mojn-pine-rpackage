---
title: "Ecological Metrics"
format: html
editor: visual
execute: 
  echo: false
  message: false
  warning: false
  results: false
---

```{r}
# TODO: color blind palettes really only support 9 categories
# TODO: add warnings/errors to calculation functions if the input data is not clean
# TODO: point to updated database
# TODO: remove pulled and missing trees (all instances of them)
# TODO: turn new (all tree) graphs into functions if useful and make them able to scale up
library(tidyverse)
library(plotly)
library(viridis)
library(khroma)
```


```{r}
#| output: false

#pine <- fiveneedlepine::loadPine("M:/MONITORING/Pine/Data/Database/Backend/FNP_MOJN_Primary.accdb")

data_dir = here::here("data")
# TODO: change to relative directory
pine <- fiveneedlepine::loadPine("C:/Users/ifoster/Documents/R/mojn-pine-rpackage/data/FNP_MOJN_Primary_Copy.accdb")

 
  
# Remove seedling plots with no seedlings
pine$data$Seedling <- pine$data$Seedling %>%
  filter(speciesCode != "_NONE") %>%
  # Make a unique identifier for all seedlings
  mutate(uniqueSeedlingID = paste0(locationID, "_", tag)) 

# TODO: there is probably a cleaner way to do this
# Make a table with all of the seedlings that were pulled or missing
pulledSeedlings <- pine$data$Seedling %>%
  filter(vitality == 'P' | vitality == 'M')

# Remove all instances of pulled or missing seedlings based on unique seedling ID
pine$data$Seedling <- pine$data$Seedling %>%
  filter(!(uniqueSeedlingID %in% pulledSeedlings$uniqueSeedlingID)) %>%
  dplyr::select(-uniqueSeedlingID)



# TODO: move this
# Calculates the visit number for each visit to a site
visitNum <- pine$data$Visit %>%
  dplyr::filter(repeatSample != 1) %>%
  dplyr::mutate(year = year(as_date(eventDate))) %>%
  # TODO: make more robust, would a visit to a panel ever be one year off
  # so something like make visit year the year the majority of visits are
  dplyr::select(panel, year)%>%
  dplyr::group_by(panel, year) %>%
  dplyr::summarize(n = n()) %>%
  dplyr::group_by(panel) %>%
  dplyr::mutate(visitNumber = seq_along(year))
  # arrange year descending within panel descending

# TODO: ONLY INCLUDES LIVE TREES
# Cleaning live tree data for wrangling and visualization
pine$data$Tree <- pine$data$Tree %>%
  # Remove all dead trees
  filter(vitality == "Live") %>%
  # Remove rows where height or DBH that are NA
  filter(!is.na(treeHeight_m) & treeHeight_m != -999 & treeHeight_m != 999) %>%
  filter(!is.na(treeDBH_cm) & treeDBH_cm != -999 & treeDBH_cm != 999) %>%
  mutate(uniqueTreeID = paste(locationID, "_", subplot, "_", tag),
    year = year(as_date(eventDate))) %>%
  # Join with table containing visit number
  left_join(visitNum) %>%
  # TODO update
  filter(!is.na(visitNumber))
```


## Live Trees
::: panel-tabset

##### Basal Area
```{r}
# avg basal area of plots split by communities/year
# TODO: add error bars
source("calculations.R")
treeDominance <- getDominance(pine$data$Tree)

pine$data$Tree %>%
  getBasalArea() %>%
  # find the total basal area of each locationID
  group_by(locationID, visitNumber, sampleFrame) %>%
  summarise(totalPlotBasal = sum(basalArea)) %>%
  group_by(visitNumber, sampleFrame) %>%
  summarise(meanBasalPerPlot = mean(totalPlotBasal)) %>%
  ggplot(aes(x = factor(sampleFrame), y = meanBasalPerPlot, fill = factor(visitNumber))) + 
  geom_col(stat="identity", position = "dodge") + 
  theme_minimal() + 
  labs(title = "Average Basal Area of each Community",
       x = "Community", y = "Basal Area (m^2)",
       fill = "Visit") + 
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(axis.text.x = element_text(hjust = 0.5)) +
  scale_fill_light()


```

##### Tree Count
```{r}
source("calculations.R")

countGraph <- pine$data$Tree %>%
  getTreeCount() %>%
  #filter(locationID == "GRBA_N_002") %>%
  ggplot(aes(x = factor(visitNumber), y = count, fill = factor(speciesCode))) +
  geom_col()  +
  facet_wrap(~locationID) + 
  theme_minimal() + 
  labs(title = "Species Count",
       x = "Visit", y = "Count",
       fill = "Species Code") + 
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(axis.text.x = element_text(hjust = 0.5))

plotly::ggplotly(countGraph)
```


##### Density
```{r}
# Species, Total, 5cm DBH bins
# Count of trees / area sampled
# #/ha
# Density of every plot
density <- pine$data$Tree %>%
  mutate(DBHGroup = cut(x = treeDBH_cm, breaks = 5*(0:(max(treeDBH_cm)/5)))) %>%
  group_by(speciesCode, locationID, visitNumber, sampleFrame, DBHGroup) %>%
  summarise(density = n()/0.25) %>%
  # Average dencity
  group_by(speciesCode, DBHGroup, visitNumber) %>%
  summarise(avgDensity = mean(density))

densityGraph <- density %>%
  filter(speciesCode != "JUNSCO" & speciesCode != "PINMON" & speciesCode != "UNK" & speciesCode != "PINPON") %>%
  ggplot(aes(x = factor(DBHGroup), y = avgDensity, color = factor(visitNumber))) +
  geom_point() + 
  geom_line(aes(color = factor(visitNumber), group = factor(visitNumber))) +
  facet_wrap(~speciesCode, scales = "free") + 
  theme_minimal() + 
  labs(title = "Average Density",
       x = "DBH (cm)", y = "Density (#/ha)",
       color = "Visit") + 
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(axis.text.x = element_text(hjust = 0.5, angle = 315)) +
  scale_fill_light()

plotly::ggplotly(densityGraph)
```

##### Frequency
```{r}
frequencyData <- pine$data$Tree %>%
  getFrequency() %>%
  group_by(speciesCode, visitNumber) %>%
  summarise(avgFrequency = mean(frequency)) %>%
  ggplot(aes(x = factor(speciesCode), y = avgFrequency, fill = factor(visitNumber))) +
  geom_col(stat="identity", position = "dodge")  +
  #facet_wrap(~speciesCode) + 
  theme_minimal() + 
  labs(title = "Average Frequency",
       x = "Species", y = "Percent",
       fill = "Visit") + 
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(axis.text.x = element_text(hjust = 0.5, angle = 315)) +
  scale_fill_light()

plotly::ggplotly(frequencyData)
```

##### Dominance
```{r}
source("calculations.R")

pine$data$Tree %>%
  getDominance() %>%
  filter(speciesCode != "JUNSCO" & speciesCode != "PINMON" & speciesCode != "UNK") %>%
  ggplot(aes(x = factor(speciesCode), y = dominance, fill = factor(visitNumber))) +
  facet_wrap(~speciesCode, scales="free", drop= TRUE) +
  geom_violin() + 
  theme_minimal() + 
  labs(title = "Dominance",
       x = "Species Code", y = "Dominance (m^2/ha)",
       fill = "Visit") + 
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(axis.text.x = element_text(hjust = 0.5)) +
  scale_fill_light()
```

##### Relative Density
```{r}
source("calculations.R")

relativeDensityGraph <- pine$data$Tree %>%
  getRelativeDensity() %>%
  #filter(locationID == "GRBA_N_002") %>%
  ggplot(aes(x = factor(visitNumber), y = relativeDensity, fill = factor(speciesCode))) +
  geom_col()  +
  facet_wrap(~locationID) + 
  theme_minimal() + 
  labs(title = "Relative Density",
       x = "Visit", y = "Relative Density",
       fill = "Species Code") + 
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(axis.text.x = element_text(hjust = 0.5, angle = 315))

plotly::ggplotly(relativeDensityGraph)
```


##### Average Relative Frequency
```{r}
source("calculations.R")
relativeFrequency <- pine$data$Tree %>% 
  getFrequency() %>%
  group_by(speciesCode, visitNumber) %>%
  summarise(avgRelativeFrequency = mean(relativeFrequency)) %>%
  ggplot(aes(x = speciesCode, y = avgRelativeFrequency, fill = factor(visitNumber))) +
  geom_col(position = "dodge") + 
  theme_minimal() + 
  labs(title = "Average Relative Frequency",
       x = "Species", y = "Percent",
       fill = "Visit") + 
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(axis.text.x = element_text(hjust = 0.5, angle = 315)) +
  scale_fill_light()

ggplotly(relativeFrequency)
```


##### Relative Frequency
```{r}
source("calculations.R")
relativeFrequency <- pine$data$Tree %>% 
  getFrequency() %>%
  filter(speciesCode != "JUNSCO") %>%
  ggplot(aes(x = factor(visitNumber), y = relativeFrequency, fill = factor(speciesCode))) +
  geom_col() +
  facet_wrap(~locationID) +
  theme_minimal() + 
  labs(title = "Relative Frequency",
       x = "Species", y = "Percent",
       fill = "Visit") + 
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(axis.text.x = element_text(hjust = 0.5, angle = 315)) +
  #scale_fill_viridis(length(unique(pine$data$Tree$speciesCode)), option = "A", discrete = TRUE)
  scale_fill_muted()



ggplotly(relativeFrequency)
```

##### Relative Dominance
```{r}
relDomiance <- pine$data$Tree %>%
  getDominance() %>%
  ggplot(aes(x = factor(visitNumber), y = relativeDominance, fill = factor(speciesCode))) +
  geom_col() +
  facet_wrap(~locationID) + 
  theme_minimal() + 
  labs(title = "Relative Dominance",
       x = "Visit Number", y = "Percent",
       fill = "Species Code") + 
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(axis.text.x = element_text(hjust = 0.5, angle = 315))

ggplotly(relDomiance)
```

##### Importance Value
```{r}
importanceVal <- pine$data$Tree %>%
  getImportanceValue() %>%
  ggplot(aes(x = factor(visitNumber), y = importanceValue, fill = factor(speciesCode))) +
  geom_col() +
  facet_wrap(~locationID) + 
  theme_minimal() + 
  labs(title = "Importance Value",
       x = "Visit Number", y = "Value",
       fill = "Species Code") + 
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(axis.text.x = element_text(hjust = 0.5, angle = 315))

ggplotly(importanceVal)
```

##### Tree Height
```{r}
pine$data$Tree %>%
  filter(speciesCode != "JUNSCO" & speciesCode != "PINMON" & speciesCode != "UNK") %>%
  ggplot(aes(x = factor(speciesCode), y = treeHeight_m, fill = factor(visitNumber))) +
  facet_wrap(~speciesCode, scales="free", drop= TRUE) +
  geom_violin() + 
  theme_minimal() + 
  labs(title = "Tree Height",
       x = "Species Code", y = "Height (m)",
       fill = "Visit") + 
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(axis.text.x = element_text(hjust = 0.5)) +
  scale_fill_light()
```


```{r}
frequency <- pine$data$Tree %>%
  getFrequency(grouping = sampleFrame)
```


:::


## Dead and Recently Dead Trees

::: panel-tabset

```{r}
pineDead <- fiveneedlepine::loadPine("C:/Users/ifoster/Documents/R/mojn-pine-rpackage/data/FNP_MOJN_Primary_Copy.accdb")

pineDead <- pineDead$data$Tree %>%
  filter(vitality == "Dead" | vitality == "Recently Dead") %>%
    mutate(uniqueTreeID = paste(locationID, "_", subplot, "_", tag),
    year = year(as_date(eventDate))) %>%
  # Join with table containing visit number
  left_join(visitNum) %>%
  # TODO update
  filter(!is.na(visitNumber)) %>%
  filter(!is.na(treeDBH_cm) & treeDBH_cm != -999 & treeDBH_cm != 999)
```
##### Count
```{r}
countDeadGraph <- pineDead %>%
  getTreeCount() %>%
  #filter(locationID == "GRBA_N_002") %>%
  ggplot(aes(x = factor(visitNumber), y = count, fill = factor(speciesCode))) +
  geom_col()  +
  facet_wrap(~locationID) + 
  theme_minimal() + 
  labs(title = "Species Count",
       x = "Visit", y = "Count",
       fill = "Species Code") + 
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(axis.text.x = element_text(hjust = 0.5)) +
  scale_fill_muted()

plotly::ggplotly(countDeadGraph)
```


##### Density
```{r}
# Species, Total, 5cm DBH bins
# Count of trees / area sampled
# #/ha
# Density of every plot
densityGraph <- pineDead %>%
  #mutate(DBHGroup = cut(x = treeDBH_cm, breaks = 5*(0:(max(treeDBH_cm)/5)))) %>%
  group_by(speciesCode, locationID, visitNumber) %>%
  summarise(density = n()/0.25) %>%
  group_by(speciesCode) %>%
  filter(n() > 2) %>%
  ungroup() %>%
  ggplot(aes(x = factor(visitNumber), y = density, fill = factor(visitNumber))) +
  geom_violin() + 
  facet_wrap(~speciesCode, scales = "free", drop = TRUE) + 
  theme_minimal() + 
  labs(title = "Density",
       x = "Species", y = "Density (#/ha)",
       fill = "Visit") + 
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(axis.text.x = element_text(hjust = 0.5, angle = 315)) +
  scale_fill_light()

densityGraph
```


:::

## Tree Status and Infestation
::: panel-tabset

```{r}
pineAliveAndDead <- fiveneedlepine::loadPine("C:/Users/ifoster/Documents/R/mojn-pine-rpackage/data/FNP_MOJN_Primary_Copy.accdb")


# TODO: move this
# Calculates the visit number for each visit to a site
visitNum <- pineAliveAndDead$data$Visit %>%
  dplyr::filter(repeatSample != 1) %>%
  dplyr::mutate(year = year(as_date(eventDate))) %>%
  # TODO: make more robust, would a visit to a panel ever be one year off
  # so something like make visit year the year the majority of visits are
  dplyr::select(panel, year)%>%
  dplyr::group_by(panel, year) %>%
  dplyr::summarize(n = n()) %>%
  dplyr::group_by(panel) %>%
  dplyr::mutate(visitNumber = seq_along(year))
  # arrange year descending within panel descending

# TODO: ONLY INCLUDES LIVE TREES
# Cleaning live tree data for wrangling and visualization
pineAliveAndDead$data$Tree <- pineAliveAndDead$data$Tree %>%
  # Remove rows where height or DBH that are NA
  filter(!is.na(treeHeight_m) & treeHeight_m != -999 & treeHeight_m != 999) %>%
  filter(!is.na(treeDBH_cm) & treeDBH_cm != -999 & treeDBH_cm != 999) %>%
  mutate(uniqueTreeID = paste(locationID, "_", subplot, "_", tag),
    year = year(as_date(eventDate))) %>%
  # Join with table containing visit number
  left_join(visitNum) %>%
  # TODO update
  filter(!is.na(visitNumber))
```


##### Vitality
```{r}
# Species, Total, 5cm DBH bins
# Proportion Live and dead


# proportion alive = number alive / total number
# proportion dead = number dead / total number
treeVitality <- pineAliveAndDead$data$Tree %>%
  mutate(DBHGroup = cut(x = treeDBH_cm, breaks = 5*(0:(max(treeDBH_cm)/5)))) %>%
  group_by(locationID, visitNumber, speciesCode, DBHGroup) %>%
  summarise(alive = mean(vitality == "Live")*100,
            #dead = mean(vitality != "Live")*100, 
            n = n()) %>%
  #pivot_longer(cols = c(alive, dead), names_to = "vitality") %>%
  group_by(visitNumber, speciesCode, DBHGroup) %>%
  summarize(meanProportion = mean(alive)) %>%
  filter(speciesCode != "JUNSCO" & speciesCode != "PINMON" & speciesCode != "UNK" & speciesCode != "PINPON") %>%
  #filter(speciesCode == "ABICON") %>%
  ggplot(aes(x = DBHGroup, y = meanProportion, fill = factor(visitNumber))) +
  geom_col(position = "dodge") +
  facet_wrap(~speciesCode, scales = "free_x") + 
  theme_minimal() + 
  labs(title = "Proportion Alive",
       x = "DBH Group", y = "Proportion",
       fill = "Vitality") + 
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(axis.text.x = element_text(hjust = 0.5, angle = 315)) +
  scale_fill_light()
  
ggplotly(treeVitality)          
```


##### Motrality Cause
```{r}
# count of mortality cause by plot

mortalityCause <- pineDead %>%
  group_by(locationID, visitNumber, causeOfDeath) %>%
  summarise(n = n()) %>%
  ggplot(aes(x = factor(visitNumber), y = n, fill = factor(causeOfDeath))) +
  geom_col() +
  facet_wrap(~locationID, scales = "free_y") + 
  theme_minimal() + 
  labs(title = "Mortality cause",
       x = "Visit", y = "Count",
       fill = "Mortality Type") + 
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(axis.text.x = element_text(hjust = 0.5, angle = 315)) +
  scale_fill_light()

ggplotly(mortalityCause)
```

##### Crown Kill
```{r}
# Mean percent % crown kill from three sections of tree
# Individual Tree, Species, total

crownKill <- pineAliveAndDead$data$Tree %>%
  filter(!is.na(crownKill_Upper_percent) & !is.na(crownKill_Mid_percent) & !is.na(crownKill_Lower_percent)) %>%
  rowwise() %>%
  mutate(avgCrownKill = mean(c_across(crownKill_Upper_percent:crownKill_Lower_percent))) %>%
  group_by(speciesCode, visitNumber) %>%
  summarise(avgSpeciesCrownKill = mean(avgCrownKill),
            n = n()) %>%
  filter(n > 4) %>%
  ggplot(aes(x = speciesCode, y = avgSpeciesCrownKill, fill = factor(visitNumber))) +
  geom_col(position = position_dodge(preserve = "single")) + 
  theme_minimal() + 
  labs(title = "Mean Crown Kill",
       x = "Species", y = "Crown Kill Percent",
       fill = "Visit") + 
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(axis.text.x = element_text(hjust = 0.5)) +
  scale_fill_light()

ggplotly(crownKill)
```



##### Dwarf Mistletoe Proportion
```{r}

mistletoePercent <- pineAliveAndDead$data$Tree %>%
  filter(!is.na(mistletoe) & mistletoe != "ND") %>%
  group_by(speciesCode, visitNumber) %>%
  summarise(percent = mean(mistletoe == 'Y')*100,
            mistletoe = sum(mistletoe == "Y"),
            n = n()) %>%
  ggplot(aes(x = speciesCode, y = percent, fill = factor(visitNumber))) +
  geom_col(position = position_dodge(preserve = "single")) + 
  theme_minimal() + 
  labs(title = "Mistletoe Percent",
       x = "Species", y = "Percent",
       fill = "Visit") + 
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(axis.text.x = element_text(hjust = 0.5)) +
  scale_fill_light()

ggplotly(mistletoePercent)
```

##### Mistletoe Density
```{r}
# number/ha
# Density of trees with mistletoe

mistletoeDensity <- pineAliveAndDead$data$Tree %>%
  filter(!is.na(mistletoe) & mistletoe != "ND") %>%
  group_by(speciesCode, locationID, visitNumber) %>%
  summarise(density = n()/0.25,
            n = n()) %>%
  group_by(speciesCode, visitNumber) %>%
  summarise(avgDensity = mean(density)) %>%
  ggplot(aes(x = speciesCode, y = avgDensity, fill = factor(visitNumber))) +
  geom_col(position = position_dodge(preserve = "single")) + 
  theme_minimal() + 
  labs(title = "Mistletoe Density",
       x = "Species", y = "Density (#/ha)",
       fill = "Visit") + 
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(axis.text.x = element_text(hjust = 0.5)) +
  scale_fill_light()

ggplotly(mistletoeDensity)
```


##### Female Cone Percent
```{r}
femaleConePercent <- pineAliveAndDead$data$Tree %>%
  filter(!is.na(femaleCones)) %>%
  group_by(locationID, speciesCode, visitNumber) %>%
  summarise(percent = mean(femaleCones == "Y")*100,
            yes = sum(femaleCones == "Y"),
            n = n()) %>%
  group_by(speciesCode, visitNumber) %>%
  summarise(avgConePercent = mean(percent)) %>%
  ggplot(aes(x = speciesCode, y = avgConePercent, fill = factor(visitNumber))) +
  geom_col(position = position_dodge(preserve = "single")) + 
  theme_minimal() + 
  labs(title = "Female Cone Percent",
       x = "Species", y = "Percent",
       fill = "Visit") + 
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(axis.text.x = element_text(hjust = 0.5)) +
  scale_fill_light()

ggplotly(femaleConePercent)
```

##### Female Cone Density
```{r}
# number/ha
# Density of trees with female cones

femaleConeDensity <- pineAliveAndDead$data$Tree %>%
  filter(!is.na(femaleCones)) %>%
  group_by(speciesCode, locationID, visitNumber) %>%
  summarise(density = sum(femaleCones == "Y")/0.25,
            n = n()) %>%
  group_by(speciesCode, visitNumber) %>%
  summarise(avgDensity = mean(density)) %>%
  ggplot(aes(x = speciesCode, y = avgDensity, fill = factor(visitNumber))) +
  geom_col(position = position_dodge(preserve = "single")) + 
  theme_minimal() + 
  labs(title = "Cone Density",
       x = "Species", y = "Density (#/ha)",
       fill = "Visit") + 
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(axis.text.x = element_text(hjust = 0.5)) +
  scale_fill_light()

ggplotly(femaleConeDensity)
```


##### Mean Cone count
```{r}
# species, plot

coneCount <- pineAliveAndDead$data$Tree %>%
  filter(!is.na(coneCount) & coneCount != -999 & coneCount != 999) %>%
  group_by(speciesCode, locationID, visitNumber) %>%
  summarise(totalConeCount = sum(coneCount)) %>%
  group_by(speciesCode, visitNumber) %>%
  summarise(avgConeCount = mean(totalConeCount)) %>%
  ggplot(aes(x = speciesCode, y = avgConeCount, fill = factor(visitNumber))) +
  geom_col(position = position_dodge(preserve = "single")) + 
  theme_minimal() + 
  labs(title = "Cone Count",
       x = "Species", y = "Count",
       fill = "Visit") + 
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(axis.text.x = element_text(hjust = 0.5)) +
  scale_fill_light()

ggplotly(coneCount)
```


:::

