---
title: "Ecological Metrics"
format: 
  html:
    page-layout: custom
    embed-resources: true
editor: visual
execute: 
  echo: false
  message: false
  warning: false
  results: false
engine: knitr  
---

```{css echo=FALSE}
.grid {
text-align: center;
}
```

::: grid
::: g-col-2
:::

::: g-col-8
```{r}
# TODO: color blind palettes really only support 9 categories
# TODO: update all network database and point to it
# TODO: update density functions
# TODO: is it possible to import which species are FNP species
# TODO: update functions so they use get_data() instead of having to input data manually
# TODO: include plots with no species when aggregating data
library(plotly)
library(viridis)
library(khroma)
library(patchwork)
library(leaflet)
library(tidyverse)
```

```{r}
#| output: false

data_dir = here::here("data")
# TODO: change to relative directory
#pine <- fiveneedlepine::loadPine("C:/Users/ifoster/Documents/R/mojn-pine-rpackage/data/FNP_MOJN_Primary_Copy.accdb")
pine <- fiveneedlepine::loadPine("M:/MONITORING/Pine/Data/Database/Backend/FNP_MOJN_Primary.accdb")
#pine <- fiveneedlepine::loadPine("M:/MONITORING/Pine/Data/Database/Backend/FNP_AllNetwork_2011-2022_20230221.accdb")
source("cleaningData.R")
pine <- cleaningPine(pine)
source("calculations.R")
```

## Map

```{r}
#| output: false

# Data wrangling to find lat and long
pine$data$Site <- pine$data$Site %>%
  QCkit::convert_utm_to_ll(EastingCol = "primaryCornerXCoord",
                    NorthingCol = "primaryCornerYCoord",
                    zone = "11",
                    datum = "NAD83") %>%
  mutate(decimalLatitude = as.numeric(decimalLatitude),
         decimalLongitude = as.numeric(decimalLongitude))
```

```{r}
map <- leaflet() %>%
  addTiles() %>%
  setView(-114.25, 38.88, zoom = 9.75) %>%
  addCircleMarkers(lng = pine$data$Site$decimalLongitude, lat = pine$data$Site$decimalLatitude, stroke = FALSE, fillOpacity = 0.75, fillColor = "#0000a5", popup = paste0(pine$data$Site$locationID, "\n", "Community: ", pine$data$Site$sampleFrame), radius = 8)
```

```{r}
map
```

## Live Trees by Plot

::: panel-tabset
##### Basal Area

```{r}
# avg basal area of plots split by communities/year
# TODO: add error bars
treeDominance <- getDominance(pine$data$LiveTrees)

pine$data$LiveTrees %>%
  getBasalArea() %>%
  # find the total basal area of each locationID
  group_by(locationID, visitNumber, sampleFrame) %>%
  summarise(totalPlotBasal = sum(basalArea)) %>%
  group_by(visitNumber, sampleFrame) %>%
  summarise(meanBasalPerPlot = mean(totalPlotBasal)) %>%
  ggplot(aes(x = factor(sampleFrame), y = meanBasalPerPlot, fill = factor(visitNumber))) + 
  geom_col(stat="identity", position = "dodge") + 
  theme_minimal() + 
  labs(title = "Mean Basal Area of each Community",
       x = "Community", y = "Basal Area (m^2)",
       fill = "Visit") + 
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(axis.text.x = element_text(hjust = 0.5)) +
  scale_fill_light()


```

##### Tree Count

```{r}
countGraph <- pine$data$LiveTrees %>%
  getTreeCount() %>%
  ggplot(aes(x = factor(visitNumber), y = count, fill = factor(speciesCode))) +
  geom_col()  +
  facet_wrap(~locationID, ncol = 5) + 
  theme_minimal() + 
  labs(title = "Tree Count by Species",
       x = "Visit", y = "Count",
       fill = "Species Code") + 
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(axis.text.x = element_text(hjust = 0.5))

plotly::ggplotly(countGraph)
```

##### Density

```{r}
# Species, Total, 5cm DBH bins
# Count of trees / area sampled
# #/ha

densityGraph <- pine$data$LiveTrees %>%
  getDensityDBH() %>%
  filter(speciesCode != "JUNSCO" & speciesCode != "PINMON" & speciesCode != "UNK" & speciesCode != "PINPON") %>%
  ggplot(aes(x = factor(DBHGroup), y = avgDensity, color = factor(visitNumber))) +
  #geom_point() + 
  geom_line(aes(group = factor(visitNumber))) +
  facet_wrap(vars(speciesCode), scales = "free") + 
  theme_minimal() + 
  labs(title = "Mean Density",
       x = "DBH (cm)", y = "Density (#/ha)",
       color = "Visit") + 
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(axis.text.x = element_text(hjust = 0.5, angle = 315)) +
  scale_fill_light() + 
    # specify 10 breaks of approximately equal size for x axis
  scale_x_discrete(breaks = round(seq(min(pine$data$LiveTrees$treeDBH_cm), max(pine$data$LiveTrees$treeDBH_cm), by = 10)))
    #breaks = levels(pine$data$LiveTrees$treeDBH_cm)[floor(seq(1, nlevels(pine$data$LiveTrees$treeDBH_cm), length.out = 5))])
                     #10*(0:(max(pine$data$LiveTrees$treeDBH_cm)/10)))

#levels(pine$data$LiveTrees$treeDBH_cm)[floor(seq(1, nlevels(pine$data$LiveTrees$treeDBH_cm), length.out = 5))])
  # scale_x_discrete(breaks = levels(dat$gr)[floor(seq(1, 
  #                                                    nlevels(dat$gr), 
  #                                                    length.out = 10))])

densityGraph
gp <- plotly::ggplotly(densityGraph)

# Get the names of the legend entries
df <- data.frame(id = seq_along(gp$x$data), legend_entries = unlist(lapply(gp$x$data, `[[`, "name")))
# Extract the group identifier
df$legend_group <- gsub("^\\((.*?),\\d+\\)", "\\1", df$legend_entries)
# Add an indicator for the first entry per group
df$is_first <- !duplicated(df$legend_group)

for (i in df$id) {
  # Is the layer the first entry of the group?
  is_first <- df$is_first[[i]]
  # Assign the group identifier to the name and legendgroup arguments
  gp$x$data[[i]]$name <- df$legend_group[[i]]
  gp$x$data[[i]]$legendgroup <- gp$x$data[[i]]$name
  # Show the legend only for the first layer of the group 
  if (!is_first) gp$x$data[[i]]$showlegend <- FALSE
}
gp
```

##### Frequency

```{r}
# Average frequency of each species - includes plots without a species when averaging
frequencyData <- pine$data$LiveTrees %>%
  getFrequency() %>%
  group_by(speciesCode, visitNumber) %>%
  summarise(avgFrequency = sum(frequency)/numberOfPlots) %>%
  ggplot(aes(x = factor(speciesCode), y = avgFrequency, fill = factor(visitNumber))) +
  geom_col(stat="identity", position = "dodge")  +
  #facet_wrap(~speciesCode) + 
  theme_minimal() + 
  labs(title = "Mean Frequency",
       x = "Species", y = "Percent",
       fill = "Visit") + 
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(axis.text.x = element_text(hjust = 0.5, angle = 315)) +
  scale_fill_light()

plotly::ggplotly(frequencyData)
```

##### Dominance

```{r}
dominance <- pine$data$LiveTrees %>%
  getDominance() %>%
  ggplot(aes(x = factor(speciesCode), y = dominance, fill = factor(visitNumber))) +
  facet_wrap(~speciesCode, scales="free", drop= TRUE) +
  geom_violin() + 
    stat_summary(fun = median, geom = "point", position = position_dodge(0.9)) +
  stat_summary(fun = mean, geom = "point", position = position_dodge(0.9), color = "red") +
  theme_minimal() + 
  labs(title = "Dominance",
       x = "Species Code", y = "Dominance (m^2/ha)",
       fill = "Visit") + 
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(axis.text.x = element_text(hjust = 0.5)) +
  scale_fill_light()

dominance
```

##### Relative Density

```{r}
relativeDensityGraph <- pine$data$LiveTrees %>%
  getRelativeDensity() %>%
  ggplot(aes(x = factor(visitNumber), y = relativeDensity, fill = factor(speciesCode))) +
  geom_col()  +
  facet_wrap(~locationID, ncol = 5) + 
  theme_minimal() + 
  labs(title = "Relative Density",
       x = "Visit", y = "Relative Density",
       fill = "Species Code") + 
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(axis.text.x = element_text(hjust = 0.5)) 
# +
#   scale_fill_muted()

plotly::ggplotly(relativeDensityGraph)
```

##### Relative Frequency

```{r}
  frequency <- pine$data$LiveTrees %>%
    # create a ID so all subplots across the sections (locationID, park, etc) are unique
    dplyr::mutate(uniqueSubPlotNum = paste0(locationID, "_", subplot)) %>%
    dplyr::group_by(locationID, visitNumber) %>%
    # Find out how many plots are in the grouping variable
    dplyr::mutate(numberOfPlots = dplyr::n_distinct(locationID)) %>%
    dplyr::group_by(locationID, speciesCode, visitNumber, numberOfPlots) %>%
    # Calculate frequency for each species in a section
    dplyr::summarise(frequency = (dplyr::n_distinct(uniqueSubPlotNum)*500)/(first(numberOfPlots)*2500)*100) %>%
    dplyr::ungroup() %>%
    dplyr::group_by(locationID, visitNumber, numberOfPlots) %>%
    # Calculate total frequency for each section which = sum of all the frequencies in the section
    dplyr::mutate(totalFrequency = sum(frequency)) %>%
    dplyr::ungroup() %>%
    dplyr::group_by(locationID, speciesCode, visitNumber, numberOfPlots) %>%
    # Calculate relative frequency for each species in a section
    dplyr::mutate(relativeFrequency = round(frequency/totalFrequency*100, 2))
```

```{r}
# Original version
relativeFrequency <- pine$data$LiveTrees %>% 
  getFrequency(grouping = locationID) %>%
  ggplot(aes(x = factor(visitNumber), y = relativeFrequency, fill = factor(speciesCode))) +
  geom_col() +
  facet_wrap(~locationID, ncol = 10) +
  theme_minimal() + 
  labs(title = "Relative Frequency",
       x = "Visit", y = "Percent",
       fill = "Species") + 
  theme(plot.title = element_text(hjust = 0.5),
        axis.text.x = element_text(hjust = 0.5),
         strip.text = element_text(size = 5))
# +
#   scale_fill_muted()

ggplotly(relativeFrequency)
```

```{r}
library(gridExtra)

theme <- 

relativeFrequency <- pine$data$LiveTrees %>% 
  # create a ID so all subplots across the sections (locationID, park, etc) are unique
    mutate(uniqueSubPlotNum = paste0(locationID, "_", subplot)) %>%
    group_by(visitNumber, sampleFrame) %>%
    mutate(numberOfPlots = n_distinct(locationID)) %>%
    group_by(locationID, speciesCode, visitNumber, numberOfPlots, sampleFrame) %>%
    # Calculate frequency for each species in the section
    summarise(frequency = (n_distinct(uniqueSubPlotNum)*500)/(n_distinct(locationID)*2500)*100) %>%
    ungroup() %>%
    group_by(locationID, visitNumber, numberOfPlots, sampleFrame) %>%
    # Calculate total frequency for each section which = sum of all the frequencies in the section
    mutate(totalFrequency = sum(frequency)) %>%
    ungroup() %>%
    group_by(locationID, speciesCode, visitNumber, numberOfPlots, sampleFrame) %>%
    # Calculate relative frequency for each species in a plot
    mutate(relativeFrequency = round(frequency/totalFrequency*100, 2))


grid.arrange(
  ggplot(data = relativeFrequency[relativeFrequency$sampleFrame %in% c("GRBA_BRIMON"),], aes(x = factor(visitNumber), y = relativeFrequency, fill = factor(speciesCode))) +
  geom_col() +
  theme(axis.title.x=element_blank(),
        axis.text.x=element_blank(),
        axis.ticks.x=element_blank()) +
    facet_grid(sampleFrame ~ locationID, scale = "free_y"),
  ggplot(data = relativeFrequency[relativeFrequency$sampleFrame %in% c("GRBA_BRISUB"),], aes(x = factor(visitNumber), y = relativeFrequency, fill = factor(speciesCode))) +
  geom_col() +
  theme(axis.title.x=element_blank(),
        axis.text.x=element_blank(),
        axis.ticks.x=element_blank()) + 
    facet_grid(sampleFrame ~ locationID, scale = "free_y"),
    ggplot(data = relativeFrequency[relativeFrequency$sampleFrame %in% c("GRBA_LIMWOO"),], aes(x = factor(visitNumber), y = relativeFrequency, fill = factor(speciesCode))) +
  geom_col() +
    facet_grid(sampleFrame ~ locationID, scale = "free_y"),
  nrow=3)
```

##### Relative Dominance

```{r}
relDomiance <- pine$data$LiveTrees %>%
  getDominance() %>%
  ggplot(aes(x = factor(visitNumber), y = relativeDominance, fill = factor(speciesCode))) +
  geom_col() +
  facet_wrap(~locationID) + 
  theme_minimal() + 
  labs(title = "Relative Dominance",
       x = "Visit Number", y = "Percent",
       fill = "Species Code") + 
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(axis.text.x = element_text(hjust = 0.5)) 
# +
#   scale_fill_muted()

ggplotly(relDomiance)
```

##### Importance Value

```{r}
importanceVal <- pine$data$LiveTrees %>%
  getImportanceValue() %>%
  ggplot(aes(x = factor(visitNumber), y = importanceValue, fill = factor(speciesCode))) +
  geom_col() +
  facet_wrap(~locationID) + 
  theme_minimal() + 
  labs(title = "Importance Value",
       x = "Visit Number", y = "Value",
       fill = "Species Code") + 
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(axis.text.x = element_text(hjust = 0.5)) 
# +
#   scale_fill_muted()

ggplotly(importanceVal)
```

##### Tree Height

```{r}
pine$data$LiveTrees %>%
  filter(speciesCode != "JUNSCO" & speciesCode != "PINMON" & speciesCode != "UNK") %>%
  ggplot(aes(x = factor(speciesCode), y = treeHeight_m, fill = factor(visitNumber))) +
  facet_wrap(~speciesCode, scales="free", drop= TRUE) +
  geom_violin() + 
  stat_summary(fun = median, geom = "point", position = position_dodge(0.9)) +
  stat_summary(fun = mean, geom = "point", position = position_dodge(0.9), color = "red") +
  theme_minimal() + 
  labs(title = "Tree Height",
       x = "Species Code", y = "Height (m)",
       fill = "Visit") + 
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(axis.text.x = element_text(hjust = 0.5)) +
  scale_fill_light()
```
:::

## Live Trees by Community

::: panel-tabset
##### Tree Count

```{r}
countGraph <- pine$data$LiveTrees %>%
  getTreeCount(grouping = sampleFrame) %>%
  #filter(locationID == "GRBA_N_002") %>%
  ggplot(aes(x = factor(visitNumber), y = count, fill = factor(speciesCode))) +
  geom_col()  +
  facet_wrap(~sampleFrame) + 
  theme_minimal() + 
  labs(title = "Tree Count by Species",
       x = "Visit", y = "Count",
       fill = "Species Code") + 
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(axis.text.x = element_text(hjust = 0.5)) 
# +
#   scale_fill_muted()

plotly::ggplotly(countGraph)
```

##### Relative Density

```{r}
relativeDensityGraph <- pine$data$LiveTrees %>%
  getRelativeDensity(grouping = sampleFrame) %>%
  ggplot(aes(x = factor(visitNumber), y = relativeDensity, fill = factor(speciesCode))) +
  geom_col()  +
  facet_wrap(~sampleFrame) + 
  theme_minimal() + 
  labs(title = "Relative Density",
       x = "Visit", y = "Relative Density",
       fill = "Species Code") + 
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(axis.text.x = element_text(hjust = 0.5)) 
# +
#   scale_fill_muted()

plotly::ggplotly(relativeDensityGraph)
```

##### Relative Frequency

```{r}
# Original version
relativeFrequency <- pine$data$LiveTrees %>%
  getFrequency(grouping = sampleFrame) %>%
  ggplot(aes(x = factor(visitNumber), y = relativeFrequency, fill = factor(speciesCode))) +
  geom_col() +
  facet_wrap(~sampleFrame) +
  theme_minimal() +
  labs(title = "Relative Frequency",
       x = "Visit", y = "Percent",
       fill = "Species") +
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(axis.text.x = element_text(hjust = 0.5)) 
# +
#   scale_fill_muted()

ggplotly(relativeFrequency)
```

##### Relative Dominance

```{r}
relDomiance <- pine$data$LiveTrees %>%
  getDominance(grouping = sampleFrame) %>%
  ggplot(aes(x = factor(visitNumber), y = relativeDominance, fill = factor(speciesCode))) +
  geom_col() +
  facet_wrap(~sampleFrame) + 
  theme_minimal() + 
  labs(title = "Relative Dominance",
       x = "Visit Number", y = "Percent",
       fill = "Species Code") + 
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(axis.text.x = element_text(hjust = 0.5))
# +
#   scale_fill_muted()

ggplotly(relDomiance)
```

##### Importance Value

```{r}
importanceVal <- pine$data$LiveTrees %>%
  getImportanceValue(grouping = sampleFrame) %>%
  ggplot(aes(x = factor(visitNumber), y = importanceValue, fill = factor(speciesCode))) +
  geom_col() +
  facet_wrap(~sampleFrame) + 
  theme_minimal() + 
  labs(title = "Importance Value",
       x = "Visit Number", y = "Value",
       fill = "Species Code") + 
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(axis.text.x = element_text(hjust = 0.5)) 
# +
#   scale_fill_muted()

ggplotly(importanceVal)
```
:::

## Dead and Recently Dead Trees

::: panel-tabset
##### Count

```{r}
countDeadGraph <- pine$data$DeadTrees %>%
  getTreeCount() %>%
  #filter(locationID == "GRBA_N_002") %>%
  ggplot(aes(x = factor(visitNumber), y = count, fill = factor(speciesCode))) +
  geom_col()  +
  facet_wrap(~locationID) + 
  theme_minimal() + 
  labs(title = "Dead Tree Count",
       x = "Visit", y = "Count",
       fill = "Species Code") + 
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(axis.text.x = element_text(hjust = 0.5)) 
# +
#   scale_fill_muted()

ggplotly(countDeadGraph)
```

##### Density

```{r}
# Species, Total, 5cm DBH bins
# Count of trees / area sampled
# #/ha
# Density of every plot
densityGraph <- pine$data$DeadTrees %>%
  #mutate(DBHGroup = cut(x = treeDBH_cm, breaks = 5*(0:(max(treeDBH_cm)/5)))) %>%
  group_by(speciesCode, locationID, visitNumber) %>%
  summarise(density = n()/0.25) %>%
  group_by(speciesCode) %>%
  filter(n() > 2) %>%
  ungroup() %>%
  ggplot(aes(x = factor(visitNumber), y = density, fill = factor(visitNumber))) +
  geom_violin() + 
    stat_summary(fun = median, geom = "point", position = position_dodge(0.9)) +
  stat_summary(fun = mean, geom = "point", position = position_dodge(0.9), color = "red") +
  facet_wrap(~speciesCode, scales = "free", drop = TRUE) + 
  theme_minimal() + 
  labs(title = "Density",
       x = "Species", y = "Density (#/ha)",
       fill = "Visit") + 
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(axis.text.x = element_text(hjust = 0.5, angle = 315)) +
  scale_fill_light()

densityGraph
```

##### Density by Plot

```{r}
densityPlotGraph <- pine$data$DeadTrees %>%
  #mutate(DBHGroup = cut(x = treeDBH_cm, breaks = 5*(0:(max(treeDBH_cm)/5)))) %>%
  group_by(speciesCode, locationID, visitNumber) %>%
  summarise(density = n()/0.25) %>%
  # group_by(speciesCode) %>%
  # filter(n() > 2) %>%
  # ungroup() %>%
  ggplot(aes(x = factor(visitNumber), y = density, fill = factor(speciesCode))) +
  geom_col() + 
  facet_wrap(~locationID, scales = "free_y") + 
  theme_minimal() + 
  labs(title = "Density by Plot",
       x = "Species", y = "Density (#/ha)",
       fill = "Visit") + 
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(axis.text.x = element_text(hjust = 0.5, angle = 315)) +
  scale_fill_light()

ggplotly(densityPlotGraph)
```

##### Recently Dead Count

```{r}
countRecentlyDeadGraph <- pine$data$DeadTrees %>%
  filter(vitality == "Recently Dead") %>%
  getTreeCount() %>%
  #filter(locationID == "GRBA_N_002") %>%
  ggplot(aes(x = factor(visitNumber), y = count, fill = factor(speciesCode))) +
  geom_col()  +
  facet_wrap(~locationID) + 
  theme_minimal() + 
  labs(title = "Recently Dead Tree Count",
       x = "Visit", y = "Count",
       fill = "Species Code") + 
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(axis.text.x = element_text(hjust = 0.5)) 
# +
#   scale_fill_muted()

ggplotly(countRecentlyDeadGraph)
```

##### Recently Dead Density

```{r}
densityRecentlyDead <- pine$data$DeadTrees %>%
  filter(vitality == "Recently Dead") %>%
  group_by(speciesCode, locationID, visitNumber) %>%
  summarise(density = n()/0.25) %>%
  ggplot(aes(x = factor(visitNumber), y = density, fill = factor(speciesCode))) +
  geom_col() + 
  facet_wrap(~locationID, scales = "free_y") + 
  theme_minimal() + 
  labs(title = "Density by Plot",
       x = "Species", y = "Density (#/ha)",
       fill = "Visit") + 
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(axis.text.x = element_text(hjust = 0.5, angle = 315)) +
  scale_fill_light()

ggplotly(densityRecentlyDead)
```
:::

## Tree Status and Infestation

::: panel-tabset
##### Vitality

```{r}
# Proportion alive = number alive / total number
treeVitality <- pine$data$Tree %>%
  mutate(DBHGroup = cut(x = treeDBH_cm, breaks = 10*(0:(max(treeDBH_cm)/10)))) %>%
  group_by(visitNumber, speciesCode, DBHGroup) %>%
  summarise(alive = mean(vitality == "Live")*100,
            n = n()) %>%
  filter(n > 4 & speciesCode != "UNK") %>%
  ggplot(aes(x = DBHGroup, y = alive, fill = factor(visitNumber))) +
  geom_col(position = position_dodge(preserve = "single")) +
  facet_wrap(~speciesCode, scales = "free_x", drop = TRUE) + 
  theme_minimal() + 
  labs(title = "Proportion Alive",
       x = "DBH Group", y = "Proportion",
       fill = "Visit") + 
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(axis.text.x = element_text(hjust = 0.5, angle = 315)) +
  scale_fill_light()
  
ggplotly(treeVitality)          
```

##### Mortality Cause

```{r}
# count of mortality cause by plot

mortalityCause <- pine$data$DeadTrees %>%
  filter(vitality == "Recently Dead") %>%
  group_by(locationID, visitNumber, causeOfDeath) %>%
  summarise(n = n()) %>%
  ggplot(aes(x = factor(visitNumber), y = n, fill = factor(causeOfDeath))) +
  geom_col() +
  facet_wrap(~locationID, scales = "free_y") + 
  theme_minimal() + 
  labs(title = "Mortality cause",
       x = "Visit", y = "Count",
       fill = "Mortality Type") + 
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(axis.text.x = element_text(hjust = 0.5, angle = 315)) +
  scale_fill_light()

ggplotly(mortalityCause)
```

```{r}
# Canker data wrangling
# TODO: there are no cankers in the data so use test dats with cankers to try out canker graphs 

treeCankerTest <- pine$data$Tree %>%
  dplyr::filter(dplyr::if_all((contains("Cank") & !contains("Type")), ~ !is.na(.x))) %>%
  select(locationID, boleCankers_A_Lower,boleCankers_A_Mid, branchCanks_I_Upper, branchCanks_I_Mid, visitNumber, speciesCode, treeDBH_cm, crownKill_Upper_percent, crownKill_Mid_percent, crownKill_Lower_percent) %>%
  slice(1:500)


treeCankerTest[sample(1:500, 100, replace=FALSE), 'boleCankers_A_Lower'] =  'Y'
treeCankerTest[sample(1:500, 250, replace=FALSE), 'boleCankers_A_Mid'] =  'Y'
treeCankerTest[sample(1:500, 150, replace=FALSE), c("branchCanks_I_Upper")] = 'Y'
treeCankerTest[sample(1:500, 100, replace=FALSE), 'branchCanks_I_Mid'] = 'Y'

#Cankers <- pineAliveAndDead$data$Tree %>%
cankers <- treeCankerTest %>%  
  # Filter out any canker rows that contains a NA (that are not canker type)
  dplyr::filter(dplyr::if_all((contains("Cank") & !contains("Type")), ~ !is.na(.x))) %>%
  mutate(activeCankers = case_when(
    # If any of the columns that contain the strings "cank" and "_A_" set the active canker marker to Y
    (if_any((contains("Cank") & contains("_A_")), ~ . == 'Y')) ~ 'Y',
    # Otherwise set it to N
    .default = 'N')) %>%
  mutate(inactiveCankers = case_when(
    # If any of the columns that contain the strings "cank" and "_A_" set the active canker marker to Y
    (if_any((contains("Cank") & contains("_I_")), ~ . == 'Y')) ~ 'Y',
    # Otherwise set it to N
    .default = 'N')) %>%
  mutate(anyCankers = case_when(
    # If the active or inactive canker columns are yes, set any canker marker to yes
    (activeCankers == 'Y' | inactiveCankers == 'Y') ~ 'Y',
    # Otherwise set it to N
    .default = 'N'))

```

##### Crown Kill

```{r}
# Mean crown kill from three sections of tree in trees that have blister rust

# TODO: currently using fake data bc there's no blister rust in mojn data, update eventually
#crownKill <- pine$data$Tree %>%
crownKill <- cankers %>%
  filter(anyCankers == "Y") %>%
  filter(!is.na(crownKill_Upper_percent) & !is.na(crownKill_Mid_percent) & !is.na(crownKill_Lower_percent)) %>%
  rowwise() %>%
  mutate(avgCrownKill = mean(c_across(crownKill_Upper_percent:crownKill_Lower_percent))) %>%
  group_by(speciesCode, visitNumber) %>%
  summarise(avgSpeciesCrownKill = mean(avgCrownKill),
            n = n()) %>%
  filter(n > 4) %>%
  ggplot(aes(x = speciesCode, y = avgSpeciesCrownKill, fill = factor(visitNumber))) +
  geom_col(position = position_dodge(preserve = "single")) + 
  theme_minimal() + 
  labs(title = "Mean Crown Kill of Trees with Blister Rust",
       x = "Species", y = "Crown Kill Percent",
       fill = "Visit") + 
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(axis.text.x = element_text(hjust = 0.5)) +
  scale_fill_light()

ggplotly(crownKill)
```

##### Active Canker Percent

```{r}
# Percent of trees with active cankers by species
# TODO: could group by plot/park/community and then avg it

activeCankerPercent <- cankers %>%
  group_by(visitNumber, speciesCode) %>%
  mutate(totalTrees = n()) %>%
  group_by(visitNumber, speciesCode, activeCankers, totalTrees) %>%
  summarise(numActive = n()) %>%
  mutate(percent = numActive/totalTrees*100) %>%
  filter(activeCankers == 'Y') %>%
  ggplot(aes(x = factor(visitNumber), y = percent, fill = activeCankers)) +
  geom_col() +
  facet_wrap(~speciesCode) + 
  theme_minimal() + 
  labs(title = "Active Canker Percent",
       x = "Visit", y = "Percent",
       fill = "Active Cankers") + 
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(axis.text.x = element_text(hjust = 0.5)) +
  scale_fill_viridis(discrete = TRUE)

ggplotly(activeCankerPercent)
```

##### Active Canker Density

```{r}
# Density of trees with active cankers by species
# Count of trees / area sampled  area =2500 sq m = 0.25 ha
# number/ha

activeCankerDensity <-  cankers %>%
  group_by(visitNumber, speciesCode, activeCankers, locationID) %>%
  summarise(plotDensity = n()/0.25) %>%
  group_by(visitNumber, speciesCode, activeCankers) %>%
  summarise(avgDensity = mean(plotDensity)) %>%
  filter(activeCankers == 'Y') %>%
  ggplot(aes(x = factor(visitNumber), y = avgDensity, fill = activeCankers)) +
  geom_col() +
  facet_wrap(~speciesCode) + 
  theme_minimal() + 
  labs(title = "Active Canker Density",
       x = "Visit", y = "Density (#/ha)",
       fill = "Active Cankers") + 
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(axis.text.x = element_text(hjust = 0.5)) +
  scale_fill_light()
  #scale_fill_discrete(type = ())

ggplotly(activeCankerDensity)
```

##### Inactive Canker Percent

```{r}
# Percent of trees with inactive cankers by species
# TODO: could group by plot/park/community and then avg it

inactiveCankerPercent <- cankers %>%
  group_by(visitNumber, speciesCode) %>%
  mutate(totalTrees = n()) %>%
  group_by(visitNumber, speciesCode, inactiveCankers, totalTrees) %>%
  summarise(numActive = n()) %>%
  mutate(percent = numActive/totalTrees*100) %>%
  # group_by(speciesCode, visitNumber, activeCankers) %>%
  # summarise(avgPercent = mean(percent)) %>%
  filter(inactiveCankers == 'Y') %>%
  ggplot(aes(x = factor(visitNumber), y = percent, fill = inactiveCankers)) +
  geom_col() +
  facet_wrap(~speciesCode) + 
  theme_minimal() + 
  labs(title = "Inactive Canker Percent",
       x = "Visit", y = "Percent",
       fill = "Active Cankers") + 
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(axis.text.x = element_text(hjust = 0.5)) +
  scale_fill_light()

ggplotly(inactiveCankerPercent)
```

##### Inactive Canker Density

```{r}
# Density of trees with inactive cankers by species
# Count of trees / area sampled  area =2500 sq m = 0.25 ha
# number/ha

activeCankerDensity <-  cankers %>%
  group_by(visitNumber, speciesCode, inactiveCankers, locationID) %>%
  summarise(plotDensity = n()/0.25) %>%
  group_by(visitNumber, speciesCode, inactiveCankers) %>%
  summarise(avgDensity = mean(plotDensity)) %>%
  filter(inactiveCankers == 'Y') %>%
  ggplot(aes(x = factor(visitNumber), y = avgDensity, fill = inactiveCankers)) +
  geom_col() +
  facet_wrap(~speciesCode) + 
  theme_minimal() + 
  labs(title = "Inctive Canker Density",
       x = "Visit", y = "Density (#/ha)",
       fill = "Inactive Cankers") + 
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(axis.text.x = element_text(hjust = 0.5)) +
  scale_fill_light()
  #scale_fill_discrete(type = ())

ggplotly(activeCankerDensity)
```

##### Canker Percent

```{r}
# Percent of trees with active OR inactive cankers by species
cankerPercent <- cankers %>%
  group_by(visitNumber, speciesCode) %>%
  mutate(totalTrees = n()) %>%
  group_by(visitNumber, speciesCode, anyCankers, totalTrees) %>%
  summarise(numActive = n()) %>%
  mutate(percent = numActive/totalTrees*100) %>%
  # group_by(speciesCode, visitNumber, activeCankers) %>%
  # summarise(avgPercent = mean(percent)) %>%
  filter(anyCankers == 'Y') %>%
  ggplot(aes(x = factor(visitNumber), y = percent, fill = anyCankers)) +
  geom_col() +
  facet_wrap(~speciesCode) + 
  theme_minimal() + 
  labs(title = "Canker Percent",
       x = "Visit", y = "Percent",
       fill = "Cankers") + 
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(axis.text.x = element_text(hjust = 0.5)) +
  scale_fill_light()
  #scale_fill_discrete(type = c("#99DDFF", "#bbcc33"))

ggplotly(cankerPercent)
```

##### Canker Density

```{r}
# Density of trees with active OR inactive cankers by species
# Count of trees / area sampled  area =2500 sq m = 0.25 ha
# number/ha

# TODO White pine species, 5cm DBH bins
activeCankerDensity <-  cankers %>%
  mutate(DBHGroup = cut(x = treeDBH_cm, breaks = 5*(0:(max(treeDBH_cm)/5)))) %>%
  group_by(visitNumber, speciesCode, anyCankers, locationID, DBHGroup) %>%
  summarise(plotDensity = n()/0.25) %>%
  group_by(visitNumber, speciesCode, anyCankers, DBHGroup) %>%
  summarise(avgDensity = mean(plotDensity)) %>%
  filter(anyCankers == 'Y') %>%
  ggplot(aes(x = DBHGroup, y = avgDensity, color = factor(visitNumber))) +
  #geom_point() +
  geom_line(group = 2) +
  #geom_col() +
  facet_wrap(~speciesCode, scales = "free") + 
  theme_minimal() + 
  labs(title = "Canker Density",
       x = "Visit", y = "Density (#/ha)",
       color = "Cankers") + 
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(axis.text.x = element_text(hjust = 0.5, angle = 315)) +
  scale_fill_light()
  #scale_fill_discrete(type = ())

ggplotly(activeCankerDensity)
```

```{r}
# Data wrangling to create one pine beetle marker
pineBeetles <- pine$data$Tree %>%
  # Filter out any beetle rows that contains a NA
  dplyr::filter(dplyr::if_all((contains("Cank") & !contains("Type")), ~ !is.na(.x))) %>%
  mutate(pineBeetle = case_when(
    # If any of the columns that contain the strings "beetle" set the beetle marker to Y
    (if_any((contains("Beetle")), ~ . == 'Y')) ~ 'Y',
    # Otherwise set it to N
    .default = 'N'))
```

##### Pine Beetle Percent

```{r}
# Percent of trees with beetle sign

beetlePercent <- pineBeetles %>%
  group_by(speciesCode, visitNumber) %>%
  mutate(totalTrees = n()) %>%
  group_by(visitNumber, speciesCode, pineBeetle, totalTrees) %>%
  summarise(numBeetles = n()) %>%
  mutate(percent = numBeetles/totalTrees*100) %>%
  # group_by(speciesCode, visitNumber, activeCankers) %>%
  # summarise(avgPercent = mean(percent)) %>%
  filter(pineBeetle == 'Y') %>%
  ggplot(aes(x = factor(visitNumber), y = percent, fill = pineBeetle)) +
  geom_col() +
  facet_wrap(~speciesCode) + 
  theme_minimal() + 
  labs(title = "Pine Beetle Percent",
       x = "Visit", y = "Percent",
       fill = "Beetle") + 
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(axis.text.x = element_text(hjust = 0.5)) +
  scale_fill_light()

ggplotly(beetlePercent)
```

##### Pine Beetle Density

```{r}
# Density of trees with beetle sign
# number/ha

beetleDensity <-  pineBeetles %>%
  group_by(visitNumber, speciesCode, pineBeetle, locationID) %>%
  summarise(plotDensity = n()/0.25) %>%
  group_by(visitNumber, speciesCode, pineBeetle) %>%
  summarise(avgDensity = mean(plotDensity)) %>%
  filter(pineBeetle == 'Y') %>%
  ggplot(aes(x = factor(visitNumber), y = avgDensity, fill = pineBeetle)) +
  geom_col() +
  facet_wrap(~speciesCode) + 
  theme_minimal() + 
  labs(title = "Pine Beetle Density",
       x = "Visit", y = "Density (#/ha)",
       fill = "Pine Beetles") + 
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(axis.text.x = element_text(hjust = 0.5)) +
  scale_fill_light()
  #scale_fill_discrete(type = ())

ggplotly(beetleDensity)
```

##### Dwarf Mistletoe Percent

```{r}
# Data wrangling to calculate trees with mistletoe
mistletoePercentData <- pine$data$Tree %>%
  filter(!is.na(mistletoe) & mistletoe != "ND") %>%
  group_by(speciesCode, visitNumber) %>%
  summarise(percent = mean(mistletoe == 'Y')*100,
            mistletoeNum = sum(mistletoe == "Y"),
            n = n()) %>%
  filter(mistletoeNum != 0) 

# # ggplot graph of mistletoe percent
# mistletoePercent <- mistletoePercentData%>%
#   ggplot(aes(x = speciesCode, y = percent, fill = factor(visitNumber))) +
#   geom_col(position = position_dodge(preserve = "single")) + 
#   theme_minimal() + 
#   labs(title = "Mistletoe Percent",
#        x = "Species", y = "Percent",
#        fill = "Visit") + 
#   theme(plot.title = element_text(hjust = 0.5)) +
#   theme(axis.text.x = element_text(hjust = 0.5)) +
#   scale_fill_light()
# 
# ggplotly(mistletoePercent)

# plotly graph of mistletoe percent
plot_ly(data = mistletoePercentData,
        type = "bar",
        x = ~speciesCode,
        y = ~percent,
        color = ~factor(visitNumber),
        hoverinfo = 'text',
        hovertext = ~paste('Species: ', speciesCode, '</br>',
                      '</br>Percent: ', round(percent, 2), '</br>',
                      'Infected Trees: ', mistletoeNum, '</br>',
                      'Total Trees: ', n, '</br>',
                      'Visit Number: ', visitNumber)) %>%
        layout(title = 'Mistletoe Percent', 
               xaxis = list(title = 'Species'), 
         yaxis = list(title = 'Percent'), 
         legend = list(title=list(text='<b>Visit</b>')))
```

##### Mistletoe Density

```{r}
# number/ha
# Density of trees with mistletoe

mistletoeDensity <- pine$data$Tree %>%
  group_by(visitNumber) %>%
  # Find the total number of plots for the visit number
  mutate(totalPlots = n_distinct(locationID)) %>%
  filter(!is.na(mistletoe) & mistletoe != "ND") %>%
  group_by(speciesCode, locationID, visitNumber, mistletoe, totalPlots) %>%
  summarise(density = n()/0.25,
            n = n()) %>%
  group_by(speciesCode, visitNumber, mistletoe, totalPlots) %>%
  # Find density of trees with mistletoe across all of the plots 
  summarise(avgDensity = sum(density)/totalPlots) %>%
  filter(mistletoe == 'Y') %>%
  ggplot(aes(x = factor(speciesCode), y = avgDensity, fill = factor(visitNumber))) +
  geom_col(position = position_dodge(preserve = "single")) + 
  theme_minimal() + 
  labs(title = "Mistletoe Density",
       x = "Species", y = "Density (#/ha)",
       fill = "Visit") + 
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(axis.text.x = element_text(hjust = 0.5)) +
  scale_fill_light()

ggplotly(mistletoeDensity)
```

##### Female Cone Percent

```{r}
femaleConePercent <- pine$data$Tree %>%
  filter(!is.na(femaleCones)) %>%
  group_by(locationID, speciesCode, year) %>%
  summarise(percent = mean(femaleCones == "Y")*100,
            yes = sum(femaleCones == "Y"),
            n = n()) %>%
  group_by(speciesCode, year) %>%
  summarise(avgConePercent = mean(percent)) %>%
  ggplot(aes(x = speciesCode, y = avgConePercent, fill = factor(year))) +
  geom_col(position = position_dodge(preserve = "single")) + 
  theme_minimal() + 
  labs(title = "Female Cone Percent",
       x = "Species", y = "Percent",
       fill = "Year") + 
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(axis.text.x = element_text(hjust = 0.5)) +
  scale_fill_light()

ggplotly(femaleConePercent)
```

##### Female Cone Density

```{r}
# number/ha
# Density of trees with female cones

femaleConeDensity <- pine$data$Tree %>%
  filter(!is.na(femaleCones)) %>%
  group_by(speciesCode, locationID, year) %>%
  summarise(density = sum(femaleCones == "Y")/0.25,
            n = n()) %>%
  group_by(speciesCode, year) %>%
  summarise(avgDensity = mean(density)) %>%
  ggplot(aes(x = speciesCode, y = avgDensity, fill = factor(year))) +
  geom_col(position = position_dodge(preserve = "single")) + 
  theme_minimal() + 
  labs(title = "Density of Trees with Cones",
       x = "Species", y = "Density (#/ha)",
       fill = "Year") + 
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(axis.text.x = element_text(hjust = 0.5)) +
  scale_fill_light()

ggplotly(femaleConeDensity)
```

##### Mean Cone count

```{r}
# Mean cone count
coneCount <- pine$data$Tree %>%
  filter(coneCount != -999 & coneCount != 999) %>%
  group_by(speciesCode, year) %>%
  summarise(totalCones = sum(coneCount), 
            totalTrees = n(), 
            avgConeCount = sum(coneCount)/totalTrees) %>%
  ggplot(aes(x = speciesCode, y = avgConeCount, fill = factor(year))) +
  geom_col(position = position_dodge(preserve = "single")) + 
  theme_minimal() + 
  labs(title = "Mean Cones per Tree",
       x = "Species", y = "Count",
       fill = "Year") + 
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(axis.text.x = element_text(hjust = 0.5)) +
  scale_fill_light()

ggplotly(coneCount)
```

##### Cone Count

```{r}
# Boxplot of cone count of all trees
coneCount <- pine$data$Tree %>%
  filter(coneCount != -999 & coneCount != 999) %>%
  filter(coneCount < 100) %>%
  ggplot(aes(x = speciesCode, y = coneCount, fill = factor(year))) +
  geom_boxplot(position = "dodge") +
  stat_summary(fun = mean, geom = "point", position = position_dodge(0.75), color = "red") +
  theme_minimal() + 
  labs(title = "Cones per Tree",
       x = "Species", y = "Count",
       fill = "Year") + 
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(axis.text.x = element_text(hjust = 0.5)) +
  scale_fill_light()

#ggplotly(coneCount)
coneCount
```
:::

## Seedlings

::: panel-tabset
##### Count

```{r}
# Total seedling counts of each species
seedlingCount <- pine$data$Seedling %>%
  filter(heightClass != "ND") %>%
  getTreeCount(grouping = heightClass) %>%
  filter(speciesCode != "POPTRE") %>%
  ggplot(aes(x = factor(visitNumber), y = count, fill = factor(heightClass))) +
  facet_wrap(~speciesCode, scales = "free") +
  geom_col(position = position_dodge(preserve = "single"), stat = "identity") + 
  theme_minimal() + 
  labs(title = "Seedling Count",
       x = "Visit", y = "Count",
       fill = "Height Class") + 
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(axis.text.x = element_text(hjust = 0.5)) +
  scale_fill_light() 

ggplotly(seedlingCount)
```

##### Density

```{r}
# number/ha
#species, plot, height class
seedlingDensity <- pine$data$Seedling %>%
  group_by(visitNumber) %>%
  mutate(totalPlots = n_distinct(locationID)) %>%
  filter(speciesCode != "_NONE" & speciesCode != "POPTRE") %>%
  filter(!is.na(heightClass)) %>%
  group_by(speciesCode, visitNumber, locationID, heightClass, totalPlots) %>%
  # area of all the seedling transects in one plot: 3*3*9 = 81 m^2
  summarise(density = n()/0.0081) %>%
  group_by(speciesCode, visitNumber, heightClass, totalPlots) %>%
  summarise(avgDensity = sum(density)/totalPlots) %>%
  ggplot(aes(x = factor(visitNumber), y = avgDensity, fill = heightClass)) +
  facet_wrap(~speciesCode, scales = "free") +
  geom_col(position = position_dodge(preserve = "total")) + 
  theme_minimal() + 
  labs(title = "Seedling Density",
       x = "Visit", y = "Density (#/ha)",
       fill = "Height Class") + 
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(axis.text.x = element_text(hjust = 0.5)) +
  scale_fill_light()

ggplotly(seedlingDensity)
  
```

##### Mean Frequency

```{r}
# Average frequency of seedlings in plots - includes zero plots in averages

seedlingFrequency <- pine$data$Seedling %>%
  getFrequency(transectArea = 9, plotArea = 81) %>%
  group_by(visitNumber) %>%
  mutate(totalPlots = n_distinct(locationID)) %>%
  filter(speciesCode != "_NONE" & speciesCode != "POPTRE") %>%
  group_by(speciesCode, visitNumber) %>%
  mutate(avgFrequency = sum(frequency)/totalPlots) %>%
  ggplot(aes(x = speciesCode, y = avgFrequency, fill = factor(visitNumber))) +
  geom_col(position = position_dodge(preserve = "total")) + 
  theme_minimal() + 
  labs(title = "Mean Frequency Per Plot",
       x = "Species", y = "Percent",
       fill = "Visit") + 
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(axis.text.x = element_text(hjust = 0.5)) +
  scale_fill_light()

ggplotly(seedlingFrequency)
```

##### Relative Density

```{r}
# Relative densities in plots that had seedlings

seedlingRelDensity <- pine$data$Seedling %>%
  getRelativeDensity(plotArea = 81) %>% 
  filter(speciesCode != "_NONE" & speciesCode != "POPTRE") %>%
  ggplot(aes(x = factor(visitNumber), y = relativeDensity, fill = speciesCode)) +
  geom_col() +
  facet_wrap(~locationID) +
  theme_minimal() + 
  labs(title = "Relative Density",
       x = "Species", y = "Percent",
       fill = "Visit") + 
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(axis.text.x = element_text(hjust = 0.5, angle = 315)) 
# +
#   scale_fill_muted()

ggplotly(seedlingRelDensity)
```

##### Relative Frequency

```{r}
seedlingRelFrequency <- pine$data$Seedling %>%
  getFrequency(transectArea = 9, plotArea = 81) %>% 
  filter(speciesCode != "_NONE" & speciesCode != "POPTRE") %>%
  ggplot(aes(x = factor(visitNumber), y = relativeFrequency, fill = speciesCode)) +
  geom_col() +
  facet_wrap(~locationID) +
  theme_minimal() + 
  labs(title = "Relative Frequency",
       x = "Species", y = "Percent",
       fill = "Visit") + 
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(axis.text.x = element_text(hjust = 0.5, angle = 315)) 
#+
  #scale_fill_viridis(length(unique(pine$data$Tree$speciesCode)), option = "A", discrete = TRUE)
  # scale_fill_muted()

ggplotly(seedlingRelFrequency)
```
:::
:::
:::
